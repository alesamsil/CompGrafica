RCM00026 - COMPUTAÇÃO GRÁFICA - C1
2020 / 2º
Tarefas da aula 18
Leonardo De Oliveira Carvalho
•
9 de abr.
10/10
10 pontos de 10 possíveis
Data de entrega: 14 de abr.
Resolvam as tarefas da aula 18. Pode ser feito em grupo de até 3 pessoas. A entrega é em vídeo, explicando a resolução, todos do grupo devem falar! Na entrega informem quais são os integrantes do grupo. O vídeo pode ser entregue por apenas um dos integrantes, mas os outros devem ao menos responder indicando que pertencem ao grupo. Podem enviar mais de um vídeo, por exemplo um vídeo por tarefa, por aula, ou por integrante.
Comentários da turma
Seus trabalhos
Com nota

18-Exemplo2D.mp4
Vídeo

18-QuadradoOPENGL.mp4
Vídeo

18-RoboOPENGL.mp4
Vídeo

Exemplo2D.txt
Texto

QuadradoOPENGL.txt
Texto

RoboOPENGL.txt
Texto

carnage_a.png
Imagem

gray.png
Imagem

hd_carnage.obj
Arquivo binário

hd_leo.obj
Arquivo binário

leo_a.png
Imagem

mecha2.obj
Arquivo binário

mecha2a.png
Imagem

wall.obj
Arquivo binário

ColorShader.frag
Arquivo binário

ColorShader.vert
Arquivo binário

TextureShader (1).vert
Arquivo binário

TextureShader.frag
Arquivo binário
1 comentário particular

Alessandro Sampaio Da Silva14 de abr.
Professor o grupo sou eu, Rafael e o Pablo

#include <GL/glew.h>
#include <GL/freeglut.h>
#include "matrix.h"
#include "Color.h"
#include "GLutils.h"
#include "ObjMesh.h"

GLTexture init_texture(std::string image){
	GLTexture texture{GL_TEXTURE_2D};
	texture.load(image);

	glGenerateMipmap(GL_TEXTURE_2D);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	if(GLEW_EXT_texture_filter_anisotropic){
		GLfloat fLargest;
		glGetFloatv(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, &fLargest);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, fLargest);
	}
	return texture;
}

struct MeshBuffer{
	VAO vao;
	GLBuffer vbo;
	int n_verts;
	std::string map_Kd;

	MeshBuffer(const ObjMesh::GroupTriangles& group){
		vao = VAO{true};
		glBindVertexArray(vao);

		vbo = GLBuffer{GL_ARRAY_BUFFER};
		vbo.data(group.triangles, GL_STATIC_DRAW);

		size_t stride = sizeof(ObjMesh::Vertex);
		size_t offset_position = offsetof(ObjMesh::Vertex, position);
		size_t offset_texCoords = offsetof(ObjMesh::Vertex, texCoords);

		glEnableVertexAttribArray(0);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, stride, (void*)offset_position);

		glEnableVertexAttribArray(1);
		glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, stride,(void*)offset_texCoords);

		n_verts = group.triangles.size();

		map_Kd = group.material.map_Kd;
	}

	void draw() const{
		glBindVertexArray(vao);
		glDrawArrays(GL_TRIANGLES, 0, n_verts);
	}
};

struct Mesh{
	std::vector<MeshBuffer> mesh_buffers;
	std::map<std::string, GLTexture> texture_map;
	mat4 Model;

	Mesh() = default;

	Mesh(std::string path, std::string obj_file, mat4 _Model, std::string default_texture = ""){
		ObjMesh mesh{path, obj_file};
		for(const auto& group: mesh.getGroupTriangles()){
			mesh_buffers.emplace_back(group);

			std::string file = group.material.map_Kd;
			if(file != "" && texture_map.find(file) == texture_map.end()){
				std::cout << "read image " << path+file << '\n';
				texture_map[file] = init_texture(path+file);
			}
		}

		Model = _Model;

		if(default_texture != "")
			texture_map[""] = init_texture(default_texture);
	}

	void draw() const{
		for(const MeshBuffer& buffer: mesh_buffers){
			std::string file = buffer.map_Kd;
			if(texture_map.find(file) != texture_map.end())
				glBindTexture(GL_TEXTURE_2D, texture_map.at(file));

			buffer.draw();
		}
	}
};

ShaderProgram shaderProgram;
std::vector<Mesh> meshes;
float vangle = 0;
mat4 BaseView = lookAt({0, 1.6, 5}, {0, 1.6, 0}, {0, 1, 0});

void init_shader(){
	shaderProgram = ShaderProgram{
		Shader{"TextureShader.vert", GL_VERTEX_SHADER},
		Shader{"TextureShader.frag", GL_FRAGMENT_SHADER}
	};
	glUseProgram(shaderProgram);
}

void init(){
	glewInit();
	glEnable(GL_DEPTH_TEST);

	init_shader();
    ///Declações



	    /// mecha1
		meshes.emplace_back("modelos/hd_carnage/", "hd_carnage.obj",
			translate(0, 0, -7) * scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/carnage_a.png"
		);

		meshes.emplace_back("modelos/hd_carnage/", "hd_carnage.obj",
            translate(8, 0, -7) * scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/carnage_a.png"
		);
		meshes.emplace_back("modelos/hd_carnage/", "hd_carnage.obj",
			translate(-8, 0, -7) * scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/carnage_a.png"
		);
		/// mecha2
		meshes.emplace_back("modelos/hd_carnage/", "mecha2.obj",
			 translate(0, 0, 0) *scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/mecha2a.png"
		);
		meshes.emplace_back("modelos/hd_carnage/", "mecha2.obj",
			translate(8, 0, 0) * scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/mecha2a.png"
		);
		meshes.emplace_back("modelos/hd_carnage/", "mecha2.obj",
			translate(-8, 0, 0) *scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/mecha2a.png"
		);
		/// mecha3
		meshes.emplace_back("modelos/hd_carnage/", "hd_leo.obj",
			 translate(0, 0, 7) *scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/leo_a.png"
		);
		meshes.emplace_back("modelos/hd_carnage/", "hd_leo.obj",
			translate(8, 0, 7) * scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/leo_a.png"
		);
		meshes.emplace_back("modelos/hd_carnage/", "hd_leo.obj",
			translate(-8, 0, 7) *scale(0.3, 0.3, 0.3),
			"modelos/hd_carnage/leo_a.png"
		);

		/// Piso
		meshes.emplace_back("modelos/", "wall.obj",
			scale(20, 20, 20),
			"modelos/gray.png"
		);


}

void desenha(){
	glClearColor(0, 165.0/255, 220.0/255, 1);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	int w = glutGet(GLUT_WINDOW_WIDTH);
	int h = glutGet(GLUT_WINDOW_HEIGHT);
	float a = w/(float)h;

	mat4 Projection = scale(1,1,-1)*perspective(45, a, 0.1, 100);
	mat4 View = rotate_x(vangle)*BaseView;

	for(const Mesh& mesh: meshes){
		mat4 Model = mesh.Model;
		Uniform{"M"} = Projection*View*Model;
		mesh.draw();
	}

	glutSwapBuffers();
}

int last_x, last_y;
void mouse(int button, int state, int x, int y){
	last_x = x;
	last_y = y;
}

void mouseMotion(int x, int y){
	int dx = x - last_x;
	int dy = y - last_y;

	vangle += 0.01*dy;
	vangle = clamp(vangle, -1.5, 1.5);
	BaseView = rotate_y(dx*0.01)*BaseView;

	last_x = x;
	last_y = y;
	glutPostRedisplay();
}

void special(int key, int x, int y){
	vec3 dir = {0, 0, 0};
	float zmove = 0;
	float xmove = 0;

	if(key == GLUT_KEY_UP)
		zmove += 0.2;

	if(key == GLUT_KEY_DOWN)
		zmove -= 0.2;

	if(key == GLUT_KEY_LEFT)
		xmove += 0.2;

	if(key == GLUT_KEY_RIGHT)
		xmove -= 0.2;

	BaseView = translate(xmove, 0, zmove)*BaseView;
	glutPostRedisplay();
}

int main(int argc, char* argv[]){
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_MULTISAMPLE | GLUT_DEPTH);
	glutInitWindowSize(800, 600);
	glutInitContextVersion(3, 3);
	glutInitContextProfile(GLUT_CORE_PROFILE);
	glutCreateWindow("janela");
	glutDisplayFunc(desenha);

	glutMouseFunc(mouse);
	glutMotionFunc(mouseMotion);
	glutSpecialFunc(special);

	printf("GL Version: %s\n", glGetString(GL_VERSION));
	printf("GLSL Version: %s\n", glGetString(GL_SHADING_LANGUAGE_VERSION));

	init();
	glutMainLoop();
}
RoboOPENGL.txt
Exibindo RoboOPENGL.txt.