RCM00026 - COMPUTAÇÃO GRÁFICA - C1
2020 / 2º
Tarefas da aula 18
Leonardo De Oliveira Carvalho
•
9 de abr.
10/10
10 pontos de 10 possíveis
Data de entrega: 14 de abr.
Resolvam as tarefas da aula 18. Pode ser feito em grupo de até 3 pessoas. A entrega é em vídeo, explicando a resolução, todos do grupo devem falar! Na entrega informem quais são os integrantes do grupo. O vídeo pode ser entregue por apenas um dos integrantes, mas os outros devem ao menos responder indicando que pertencem ao grupo. Podem enviar mais de um vídeo, por exemplo um vídeo por tarefa, por aula, ou por integrante.
Comentários da turma
Seus trabalhos
Com nota

18-Exemplo2D.mp4
Vídeo

18-QuadradoOPENGL.mp4
Vídeo

18-RoboOPENGL.mp4
Vídeo

Exemplo2D.txt
Texto

QuadradoOPENGL.txt
Texto

RoboOPENGL.txt
Texto

carnage_a.png
Imagem

gray.png
Imagem

hd_carnage.obj
Arquivo binário

hd_leo.obj
Arquivo binário

leo_a.png
Imagem

mecha2.obj
Arquivo binário

mecha2a.png
Imagem

wall.obj
Arquivo binário

ColorShader.frag
Arquivo binário

ColorShader.vert
Arquivo binário

TextureShader (1).vert
Arquivo binário

TextureShader.frag
Arquivo binário
1 comentário particular

Alessandro Sampaio Da Silva14 de abr.
Professor o grupo sou eu, Rafael e o Pablo

#include <GL/glew.h>
#include <GL/freeglut.h>
#include "GLutils.h"
#include "VertexUtils.h"

VAO vao;
GLBuffer vbo;


void init(){
	glewInit();

	ShaderProgram shaderProgram{
		Shader{"ColorShader.vert", GL_VERTEX_SHADER},
		Shader{"ColorShader.frag", GL_FRAGMENT_SHADER}
	};
	glUseProgram(shaderProgram);

	 std::vector<Vec2Col> P = {
        {{1, 0}, blue},
        {{0, 1}, blue},
        {{-1, 0}, blue},
        {{0, -1}, blue}
    };

	vao = VAO{true};
	glBindVertexArray(vao);

	vbo = GLBuffer{GL_ARRAY_BUFFER};
	vbo.data(P, GL_STATIC_DRAW);

	glEnableVertexAttribArray(0);
	glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE,
			sizeof(Vec2Col), (void*)offsetof(Vec2Col, position));

	glEnableVertexAttribArray(1);
	glVertexAttribPointer(1, 3, GL_UNSIGNED_BYTE, GL_TRUE,
			sizeof(Vec2Col), (void*)offsetof(Vec2Col, color));
}

void desenha(){
	glClearColor(1, 1, 1, 1);
	glClear(GL_COLOR_BUFFER_BIT);
    double t = (2*M_PI/65);
        for(int i=0; i<65; i++){
            Uniform{"M"} =  rotate_z(t*i) * translate(-0.5, -0.5, 0) * scale(0.05,0.05,0.05) * rotate_z(M_PI/4);
            glBindVertexArray(vao);
            glDrawArrays(GL_LINE_LOOP, 0, 4);
        }
        glutSwapBuffers();
}

int main(int argc, char* argv[]){
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_MULTISAMPLE);
	glutInitWindowSize(600, 600);
	glutInitContextVersion(3, 3);
	glutInitContextProfile(GLUT_CORE_PROFILE);
	glutCreateWindow("janela");
	glutDisplayFunc(desenha);

	printf("GL Version: %s\n", glGetString(GL_VERSION));
	printf("GLSL Version: %s\n", glGetString(GL_SHADING_LANGUAGE_VERSION));

	init();
	glutMainLoop();
}
QuadradoOPENGL.txt
Exibindo QuadradoOPENGL.txt.