#include <GL/glew.h>
#include <GL/freeglut.h>
#include "GLutils.h"
#include "ObjMesh.h"

GLTexture init_texture(std::string image){
	GLTexture texture{GL_TEXTURE_2D};
	texture.load(image);

	glGenerateMipmap(GL_TEXTURE_2D);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	if(GLEW_EXT_texture_filter_anisotropic){
		GLfloat fLargest;
		glGetFloatv(GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, &fLargest);
		glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAX_ANISOTROPY_EXT, fLargest);
	}
	return texture;
}

MaterialInfo standard_material(std::string mat_Kd){
	MaterialInfo mat;

	mat.name = "standard";

	mat.Ka = {1, 1, 1};
	mat.Kd = {1, 1, 1};
	mat.Ks = {0, 0, 0};
	mat.Ns = 1;

	mat.map_Kd = mat_Kd;

	return mat;
}

using Vertex = ObjMesh::Vertex;

struct SurfaceMesh{
	std::vector<Vertex> vertices;
	std::vector<unsigned int> indices;
};

struct Mesh{
	VAO vao;
	GLBuffer vbo;
	GLBuffer ebo;
	std::vector<MaterialRange> materials;
	std::map<std::string, GLTexture> texture_map;
	mat4 Model;

	Mesh() = default;

	Mesh(std::string path, std::string obj_file, mat4 _Model, MaterialInfo std_mat = standard_material("")){
		Model = _Model;

		ObjMesh mesh{path, obj_file};
		std::vector<Vertex> tris = mesh.getTriangles();
		init_buffers(tris);

		materials = mesh.getMaterials(std_mat);
		for(MaterialRange range: materials){
			load_texture(path, range.mat.map_Ka);
			load_texture(path, range.mat.map_Kd);
			load_texture(path, range.mat.map_Ks);
			load_texture(path, range.mat.map_Bump);
		}
	}

	Mesh(const SurfaceMesh& surface, mat4 _Model, MaterialInfo std_mat = standard_material("")){
		Model = _Model;
		init_buffers(surface.vertices);

		ebo = GLBuffer{GL_ELEMENT_ARRAY_BUFFER};
		ebo.data(surface.indices, GL_STATIC_DRAW);

		unsigned int size = surface.indices.size();

		materials = {
			{std_mat, 0, size}
		};
		load_texture("", std_mat.map_Kd);
	}

	void init_buffers(const std::vector<Vertex>& vertices){
		vao = VAO{true};
		glBindVertexArray(vao);

		vbo = GLBuffer{GL_ARRAY_BUFFER};
		vbo.data(vertices, GL_STATIC_DRAW);

		size_t stride = sizeof(Vertex);
		size_t offset_position = offsetof(Vertex, position);
		size_t offset_texCoords = offsetof(Vertex, texCoords);
		size_t offset_normal = offsetof(Vertex, normal);

		glEnableVertexAttribArray(0);
		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, stride, (void*)offset_position);

		glEnableVertexAttribArray(1);
		glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, stride,(void*)offset_texCoords);

		glEnableVertexAttribArray(2);
		glVertexAttribPointer(2, 3, GL_FLOAT, GL_FALSE, stride,(void*)offset_normal);
	}

	void load_texture(std::string path, std::string file){
		if(file != "" && texture_map.find(file) == texture_map.end()){
			std::cout << "read image " << path+file << '\n';
			texture_map[file] = init_texture(path+file);
		}
	}

	void draw(MaterialRange range) const{
		Uniform{"Ka"} = range.mat.Ka;
		Uniform{"Kd"} = range.mat.Kd;
		Uniform{"Ks"} = range.mat.Ks;
		Uniform{"shininess"} = range.mat.Ns;

		bool has_map_Ka = texture_map.find(range.mat.map_Ka) != texture_map.end();
		Uniform{"has_map_Ka"} = has_map_Ka;
		if(has_map_Ka){
			Uniform{"map_Ka"} = 0;
			glActiveTexture(GL_TEXTURE0);
			glBindTexture(GL_TEXTURE_2D, texture_map.at(range.mat.map_Ka));
		}

		bool has_map_Kd = texture_map.find(range.mat.map_Kd) != texture_map.end();
		Uniform{"has_map_Kd"} = has_map_Kd;
		if(has_map_Kd){
			Uniform{"map_Kd"} = 1;
			glActiveTexture(GL_TEXTURE1);
			glBindTexture(GL_TEXTURE_2D, texture_map.at(range.mat.map_Kd));
		}

		bool has_map_Ks = texture_map.find(range.mat.map_Ks) != texture_map.end();
		Uniform{"has_map_Ks"} = has_map_Ks;
		if(has_map_Ks){
			Uniform{"map_Ks"} = 2;
			glActiveTexture(GL_TEXTURE2);
			glBindTexture(GL_TEXTURE_2D, texture_map.at(range.mat.map_Ks));
		}

		glBindVertexArray(vao);
		if(ebo == 0)
			glDrawArrays(GL_TRIANGLES, range.first, range.count);
		else
			glDrawElements(GL_TRIANGLES, range.count, GL_UNSIGNED_INT, (void*)(range.first*sizeof(int)));
	}

	void draw() const{
		Uniform{"Model"} = Model;
		for(MaterialRange range: materials)
			draw(range);
	}
};



struct ShadowMap{
	const int SHADOW_WIDTH = 2000, SHADOW_HEIGHT = 2000;
	ShaderProgram shadowShaderProgram;
	GLTexture depthMap;
	unsigned int depthMapFBO;
	mat4 lightSpaceMatrix;
	vec3 light_position;
	mat4 Projection, View;

	void init(){
		//////////////////////////////////////////////////////////////////////////////////////
		// Textura
		depthMap = GLTexture{GL_TEXTURE_2D};
		glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT,
				SHADOW_WIDTH, SHADOW_HEIGHT, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);

		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_BORDER);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_BORDER);
		float borderColor[] = {1, 1, 1, 1};
		glTexParameterfv(GL_TEXTURE_2D, GL_TEXTURE_BORDER_COLOR, borderColor);

		//////////////////////////////////////////////////////////////////////////////////////
		// Framebuffer
		glGenFramebuffers(1, &depthMapFBO);
		glBindFramebuffer(GL_FRAMEBUFFER, depthMapFBO);

		// Associa a textura ao framebuffer
		glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, depthMap, 0);

		// Volta ao framebuffer padrÃ£o
		glBindFramebuffer(GL_FRAMEBUFFER, 0);

		//////////////////////////////////////////////////////////////////////////////////////
		// Shader
		shadowShaderProgram = ShaderProgram{
			Shader{"shadow.vert", GL_VERTEX_SHADER},
		};
	}

	void draw(const std::vector<Mesh>& meshes){
		glBindFramebuffer(GL_FRAMEBUFFER, depthMapFBO);
		glViewport(0, 0, SHADOW_WIDTH, SHADOW_HEIGHT);
		glClear(GL_DEPTH_BUFFER_BIT);

		float a = SHADOW_WIDTH/(float)SHADOW_HEIGHT;
		Projection = scale(1,1,-1)*perspective(100, a, 0.1, 50);
		View = lookAt(light_position, {0, 0, 0}, {0, 1, 0});
		lightSpaceMatrix = Projection*View;

		glUseProgram(shadowShaderProgram);
		Uniform{"Projection"} = Projection;
		Uniform{"View"} = View;

		for(const Mesh& m: meshes)
			m.draw();
	}
};

struct RayTracing{
	VAO vao;
	ShaderProgram shaderProgram;
	ShaderProgram shadowShaderProgram;

	void init(){
		shaderProgram = ShaderProgram{
			Shader{"RayTracing.vert", GL_VERTEX_SHADER},
			Shader{"RayTracing02.frag", GL_FRAGMENT_SHADER}
		};
		shadowShaderProgram = ShaderProgram{
			Shader{"RayTracing.vert", GL_VERTEX_SHADER},
			Shader{"RayTracingDepth02.frag", GL_FRAGMENT_SHADER}
		};

		vao = VAO{true};
	}

	void draw_depth(mat4 Projection, mat4 View){
		glUseProgram(shadowShaderProgram);
		Uniform{"Projection"} = Projection;
		Uniform{"View"} = View;

		glBindVertexArray(vao);
		glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
	}

	void draw(mat4 Projection, mat4 View, vec3 light_position){
		glUseProgram(shaderProgram);
		Uniform{"Projection"} = Projection;
		Uniform{"View"} = View;
		Uniform{"lightPos"} = light_position;

		glBindVertexArray(vao);
		glDrawArrays(GL_TRIANGLE_FAN, 0, 4);
	}

};

ShaderProgram shaderProgram;
std::vector<Mesh> meshes;
ShadowMap shadow_map;
RayTracing ray_tracing;

mat4 BaseView = lookAt({0, 7, 20}, {0, 7, 0}, {0, 1, 0});
float vangle = 0;


void init_scene(){
        /// mecha1
        meshes.emplace_back("modelos/hd_carnage/", "hd_carnage.obj",
			translate(0, 0, -7) * scale(0.3, 0.3, 0.3),
			standard_material("carnage_a.png")
		);

		meshes.emplace_back("modelos/hd_carnage/", "hd_carnage.obj",
            translate(8, 0, -7) * scale(0.3, 0.3, 0.3),
			standard_material("carnage_a.png")
		);
		meshes.emplace_back("modelos/hd_carnage/", "hd_carnage.obj",
			translate(-8, 0, -7) * scale(0.3, 0.3, 0.3),
			standard_material("carnage_a.png")
		);
		/// mecha2
		meshes.emplace_back("modelos/hd_carnage/", "mecha2.obj",
			 translate(0, 0, 0) *scale(0.3, 0.3, 0.3),
			standard_material("mecha2a.png")
		);
		meshes.emplace_back("modelos/hd_carnage/", "mecha2.obj",
			translate(8, 0, 0) * scale(0.3, 0.3, 0.3),
			standard_material("mecha2a.png")
		);
		meshes.emplace_back("modelos/hd_carnage/", "mecha2.obj",
			translate(-8, 0, 0) *scale(0.3, 0.3, 0.3),
			standard_material("mecha2a.png")
		);
		/// mecha3
		meshes.emplace_back("modelos/hd_carnage/", "hd_leo.obj",
			 translate(0, 0, 7) *scale(0.3, 0.3, 0.3),
			standard_material("leo_a.png")
		);
		meshes.emplace_back("modelos/hd_carnage/", "hd_leo.obj",
			translate(8, 0, 7) * scale(0.3, 0.3, 0.3),
			standard_material("leo_a.png")
		);
		meshes.emplace_back("modelos/hd_carnage/", "hd_leo.obj",
			translate(-8, 0, 7) *scale(0.3, 0.3, 0.3),
			standard_material("leo_a.png")
		);

		/// Piso
		meshes.emplace_back("modelos/", "wall.obj",
			scale(40, 40, 40),
			standard_material("gray.png")
		);
}

void init(){
	glewInit();
	glEnable(GL_DEPTH_TEST);

	shaderProgram = ShaderProgram{
		Shader{"PhongShaderShadow.vert", GL_VERTEX_SHADER},
		Shader{"PhongShaderShadow.frag", GL_FRAGMENT_SHADER}
	};

	shadow_map.init();
	shadow_map.light_position = {0, 15, 15};

	ray_tracing.init();

	init_scene();
}

void draw_shadow_buffer(){
	shadow_map.draw(meshes);
	ray_tracing.draw_depth(shadow_map.Projection, shadow_map.View);
}

void draw_color_buffer(){
	glBindFramebuffer(GL_FRAMEBUFFER, 0);
	int w = glutGet(GLUT_WINDOW_WIDTH);
	int h = glutGet(GLUT_WINDOW_HEIGHT);
	glViewport(0, 0, w, h);

	glClearColor(0.27, 0.67, .93, 1);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	glUseProgram(shaderProgram);

	float a = w/(float)h;

	mat4 Projection = scale(1,1,-1)*perspective(45, a, 0.1, 500);
	mat4 View = rotate_x(vangle)*BaseView;
	Uniform{"Projection"} = Projection;
	Uniform{"View"} = View;
	Uniform{"LightSpaceMatrix"} = shadow_map.lightSpaceMatrix;

	Uniform{"light_position"} = toVec4(shadow_map.light_position, 1);
	Uniform{"Ia"} = vec3{ 0.2, 0.2, 0.2};
	Uniform{"Id"} = vec3{ 0.8, 0.8, 0.8};
	Uniform{"Is"} = vec3{ 0.8, 0.8, 0.8};

	glActiveTexture(GL_TEXTURE5);
	glBindTexture(GL_TEXTURE_2D, shadow_map.depthMap);
	Uniform{"shadow_map"} = 5;

	for(const Mesh& mesh: meshes)
		mesh.draw();

	ray_tracing.draw(Projection, View, shadow_map.light_position);

	glutSwapBuffers();
}

void desenha(){
	// Primeira passada: renderiza o buffer de sombra
	draw_shadow_buffer();

	// Segunda passada: renderiza o buffer de cor
	draw_color_buffer();
}

int last_x, last_y;
void mouse(int button, int state, int x, int y){
	last_x = x;
	last_y = y;
}

void mouseMotion(int x, int y){
	int dx = x - last_x;
	int dy = y - last_y;

	vangle += 0.01*dy;
	vangle = clamp(vangle, -1.5, 1.5);
	BaseView = rotate_y(dx*0.01)*BaseView;

	last_x = x;
	last_y = y;
	glutPostRedisplay();
}

void special(int key, int x, int y){
	vec3 dir = {0, 0, 0};
	float zmove = 0;
	float xmove = 0;

	if(key == GLUT_KEY_UP)
		zmove += 0.2;

	if(key == GLUT_KEY_DOWN)
		zmove -= 0.2;

	if(key == GLUT_KEY_LEFT)
		xmove += 0.2;

	if(key == GLUT_KEY_RIGHT)
		xmove -= 0.2;

	BaseView = translate(xmove, 0, zmove)*BaseView;
	glutPostRedisplay();
}

int main(int argc, char* argv[]){
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_MULTISAMPLE | GLUT_DEPTH);
	glutInitWindowSize(800, 600);
	glutInitContextVersion(3, 3);
	glutInitContextProfile(GLUT_CORE_PROFILE);
	glutCreateWindow("janela");
	glutDisplayFunc(desenha);

	glutMouseFunc(mouse);
	glutMotionFunc(mouseMotion);
	glutSpecialFunc(special);

	printf("GL Version: %s\n", glGetString(GL_VERSION));
	printf("GLSL Version: %s\n", glGetString(GL_SHADING_LANGUAGE_VERSION));

	init();
	glutMainLoop();
}